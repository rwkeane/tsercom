[build-system]
requires = [ "setuptools>=61.0", "wheel", "setuptools_scm",]
build-backend = "setuptools.build_meta"

[project]
name = "tsercom"
requires-python = ">=3.10"
dynamic = [ "version",]
readme = "README.md"
keywords = [ "ts", "time", "time series", "communication", "rpc", "serialization", "transport", "channel", "grpc",]
description = "Time-SERies COMmunication using gRPC for data science and machine learning applications."
classifiers = [ "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "License :: OSI Approved :: Apache Software License",]
dependencies = [ "grpcio>=1.62.0, <1.74.0", "grpcio-status>=1.62.0, <1.74.0", "grpcio-tools>=1.62.0, <1.74.0", "ntplib>=0.4.0", "zeroconf>=0.135.0", "psutil>=5.9.0",]
[[project.authors]]
name = "Ryan Keane"

[project.license]
text = "Apache-2.0"

[project.optional-dependencies]
dev = [ "pytest", "pytest-asyncio", "pytest-mock", "pytest-timeout", "pre-commit", "ruff", "black", "mypy", "pylint", "cryptography", "mypy-protobuf",]
typing = [ "types-psutil", "types-requests", "mypy-protobuf",]
docs = [ "sphinx", "sphinx-rtd-theme", "sphinx-multiversion",]

[project.urls]
Homepage = "https://github.com/rwkeane/tsercom"
Documentation = "https://github.com/rwkeane/tsercom"
Repository = "https://github.com/rwkeane/tsercom"
Issues = "https://github.com/rwkeane/tsercom/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools_scm]
write_to = "tsercom/_version.py"
write_to_template = "__version__ = '{version}'"

[tool.black]
line-length = 79

[tool.ruff]
line-length = 79

[tool.mypy]
strict = true
warn_unused_ignores = true
show_error_codes = true
check_untyped_defs = true
pretty = true
exclude = [ ".git", "__pycache__", "build", "dist", "venv", ".*_pb2.py", ".*_pb2_grpc.py", ".*_pb2.pyi", "migrations", "scripts", "tsercom/.*_test\\.py$", "tsercom/.*_tests\\.py$", "tsercom/.*_unittest\\.py$", "tsercom/.*_unittests\\.py$", "tsercom/.*_e2etest\\.py$", "tsercom/.*_e2etests\\.py$", ".*/.*_test\\.py$", ".*/.*_tests\\.py$", ".*/.*_unittest\\.py$", ".*/.*_unittests\\.py$", ".*/.*_e2etest\\.py$", ".*/.*_e2etests\\.py$", "tests/", "tsercom/test/",]
[[tool.mypy.overrides]]
module = [ "*.proto.*", "*.proto",]
ignore_errors = true
disable_error_code = [ "attr-defined",]

[[tool.mypy.overrides]]
module = [ "grpc.*", "grpc_status.*", "google.*", "grpcio.*",]
ignore_missing_imports = true

[tool.setuptools.package-dir]
"" = "."

[tool.ruff.lint]
exclude = [ ".git", "__pycache__", "build", "dist", "venv", "**/*_pb2.py", "**/*_pb2.pyi", "**/*_pb2_grpc.py", "**/*_unittest.py", "**/*_component_test.py",]
fixable = [ "ALL",]

[tool.pytest.ini_options]
python_files = [ "*_test.py", "*_tests.py", "*_unittest.py", "*_unittests.py", "*_e2etest.py", "*_e2etests.py",]
python_classes = [ "*Test*",]
python_functions = [ "test_*",]
markers = [ "asyncio: mark a test as asynchronous (run by pytest-asyncio)",]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [ "ignore:cannot collect test class 'TestConnectionCall'.*because it has a __init__ constructor:pytest.PytestCollectionWarning", "ignore:cannot collect test class 'TestConnectionResponse'.*because it has a __init__ constructor:pytest.PytestCollectionWarning",]

[tool.pylint.MASTER]
ignore-paths = [ "^.git", ".*__pycache__/.*", "^build/.*", "^dist/.*", "^venv/.*", "^docs/.*", "^tests/.*", "^scripts/.*", "^.*_pb2.py", "^.*_pb2.pyi", "^.*_pb2_grpc.py", "^.*/proto/.*", ".*_test.py", ".*_tests.py", ".*_unittest.py", ".*_unittests.py", ".*_e2etest.py", ".*_e2etests.py", "^tsercom/_version\\\\.py$",]

[tool.pylint.format]
max-line-length = 80

[tool.pylint."MESSAGES CONTROL"]
disable = [ "C0301", "R0801", "W0511",]

[tool.coverage.run]
source = [ "tsercom",]
omit = [ "*_test.py", "*_tests.py", "*_unittest.py", "*_unittests.py", "*_e2etest.py", "*_e2etests.py", "tsercom/tests/*", "tests/*", "*/.venv/*", "tsercom/*/*_pb2.py", "tsercom/*/*_pb2_grpc.py", "tsercom/*/proto/*",]

[tool.setuptools.packages.find]
where = [ ".",]
include = [ "tsercom*",]
exclude = [ "docs*", "tests*", "scripts",]
