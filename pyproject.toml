[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "tsercom"
requires-python = ">=3.10"
dynamic = ["version"]
license = { text = "Apache-2.0" }
readme = "README.md"
keywords = ["ts", "time", "time series", "communication", "rpc", "serialization", "transport", "channel", "grpc"]
description = "Time-SERies COMmunication using gRPC for data science and machine learning applications."
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License"
]
authors = [
  { name = "Ryan Keane" },
]
dependencies = [
  "grpcio>=1.62.0, <1.74.0",
  "grpcio-status>=1.62.0, <1.74.0",
  "grpcio-tools>=1.62.0, <1.74.0",
  "grpcio-health-checking>=1.62.0, <1.74.0",
  "ntplib>=0.4.0",
  "zeroconf>=0.135.0",
  "psutil>=5.9.0",
  "numpy>=2.2.6", # For tensor operations and PyTorch compatibility
  "sortedcontainers",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-mock", 
    "pytest-timeout",
    "pre-commit",
    "ruff",
    "black",
    "mypy",
    "pylint",
    "cryptography", # Added
    "mypy-protobuf",
]
typing = [
    "types-psutil",
    "types-requests",
    "mypy-protobuf"
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-multiversion",
]

[project.urls]
Homepage = "https://github.com/rwkeane/tsercom"
Documentation = "https://github.com/rwkeane/tsercom"
Repository = "https://github.com/rwkeane/tsercom"
Issues = "https://github.com/rwkeane/tsercom/issues"

# BUILDING THE PROJECT

[tool.setuptools.packages.find]
where = ["."]
include = ["tsercom*"]
exclude = ["docs*", "tests*", "scripts"]

[tool.setuptools] # Add this section
package-dir = {"" = "."}
include-package-data = true # To let me include protos

[tool.setuptools_scm]
write_to = "tsercom/_version.py"
write_to_template = "__version__ = '{version}'"

# BLACK SETTINGS

[tool.black]
line-length = 88

# RUFF SETTINGS

[tool.ruff]
line-length = 88  # Must match Black's line-length

[tool.ruff.lint] 
# Select all the recommended rule sets.
select = [
    "F",  # Pyflakes (finds unused imports, undefined names)
    "E",  # pycodestyle errors  
    # "W",  # pycodestyle warnings (enable for full PEP 8)
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear (finds likely bugs)
    "UP", # pyupgrade (modernize syntax)
    "S",  # bandit (security checks)
    # "SIM",# flake8-simplify (suggests simpler code)
    "T20",# flake8-print (finds leftover print statements)
    "TID",# flake8-tidy-imports (enforce import styles)
    # "D",  # pydocstyle (docstring conventions)
]
ignore = ["S101", "S104"]

exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv", 
    "**/*_pb2.py",     # Clearer exclusion for .py files
    "**/*_pb2.pyi",    # Explicitly exclude .pyi files
    "**/*_pb2_grpc.py", # Clearer exclusion 
    "**/*_unittest.py",
    "**/*_unittests.py",
    "**/*_test.py",
    "**/*_tests.py",
    "**/*_e2etest.py",
    "**/*_e2etests.py",
]

# Allow ruff's auto-fix for all enabled rules.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# Ensure ruff's isort implementation knows where your source code starts.
known-first-party = ["tsercom"]

# PYTEST SETTINGS

[tool.pytest.ini_options]
python_files = [
    "*_test.py",
    "*_tests.py",
    "*_unittest.py",
    "*_unittests.py",
    "*_e2etest.py",
    "*_e2etests.py",
]
python_classes = [
    "*Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "asyncio: mark a test as asynchronous (run by pytest-asyncio)",
]
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [ 
    "ignore:cannot collect test class 'TestConnectionCall'.*has a __init__ constructor:pytest.PytestCollectionWarning",
    "ignore:cannot collect test class 'TestConnectionResponse'.*has a __init__ constructor:pytest.PytestCollectionWarning",
    "ignore:cannot collect test class 'E2ETestServiceStub'.*has a __init__ constructor:pytest.PytestCollectionWarning",
]

# MYPY SETTINGS

[tool.mypy]
strict = true
warn_unused_ignores = true
show_error_codes = true # Add for readability
check_untyped_defs = true  # Start with this
pretty = true
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".*_pb2.py",        # Exclude Protocol Buffer generated files
    ".*_pb2_grpc.py",   # Exclude gRPC generated files
    ".*_pb2.pyi",       # Exclude Protocol Buffer stub files
    "migrations",
    "scripts",
    # Exclude test files based on pytest configuration and common patterns
    # More specific paths:
    "tsercom/.*_test\\.py$",
    "tsercom/.*_tests\\.py$",
    "tsercom/.*_unittest\\.py$",
    "tsercom/.*_unittests\\.py$",
    "tsercom/.*_e2etest\\.py$",
    "tsercom/.*_e2etests\\.py$",
    # Also keep broader ones just in case, or if tests are outside tsercom
    ".*/.*_test\\.py$",
    ".*/.*_tests\\.py$",
    ".*/.*_unittest\\.py$",
    ".*/.*_unittests\\.py$",
    ".*/.*_e2etest\\.py$",
    ".*/.*_e2etests\\.py$",
    "tests/",
    "tsercom/test/"
]

[[tool.mypy.overrides]]
module = [
    "*.proto.*", 
    "*.proto", 
]
ignore_errors = true
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = [ "grpc.*", "grpc_status.*", "google.*", "grpcio.*" ]  # Target the grpc module and its submodules
ignore_missing_imports = true

# CODE COVERAGE SETTINGS

[tool.coverage.run]
source = ["tsercom"]
omit = [
    # Pytest discovery patterns
    "*_test.py",
    "*_tests.py",
    "*_unittest.py",
    "*_unittests.py",
    "*_e2etest.py",
    "*_e2etests.py",
    # Common test directory patterns
    "tsercom/tests/*",
    "tests/*",
    # Virtual environment
    "*/.venv/*",
    # Exclude generated protobuf files explicitly
    "tsercom/*/*_pb2.py",
    "tsercom/*/*_pb2_grpc.py",
    "tsercom/*/proto/*",
]
