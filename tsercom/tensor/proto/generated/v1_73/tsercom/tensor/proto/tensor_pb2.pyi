"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import time_pb2
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TensorChunk(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _CompressionType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _CompressionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TensorChunk._CompressionType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        NONE: TensorChunk._CompressionType.ValueType  # 0
        LZ4: TensorChunk._CompressionType.ValueType  # 1

    class CompressionType(_CompressionType, metaclass=_CompressionTypeEnumTypeWrapper): ...
    NONE: TensorChunk.CompressionType.ValueType  # 0
    LZ4: TensorChunk.CompressionType.ValueType  # 1

    TIMESTAMP_FIELD_NUMBER: builtins.int
    STARTING_INDEX_FIELD_NUMBER: builtins.int
    DATA_BYTES_FIELD_NUMBER: builtins.int
    COMPRESSION_FIELD_NUMBER: builtins.int
    starting_index: builtins.int
    """The starting index of this chunk in the larger conceptual 1D tensor."""
    data_bytes: builtins.bytes
    """The raw bytes of the 1D tensor data chunk."""
    compression: global___TensorChunk.CompressionType.ValueType
    """New field"""
    @property
    def timestamp(self) -> time_pb2.ServerTimestamp:
        """Timestamp of the data chunk."""

    def __init__(
        self,
        *,
        timestamp: time_pb2.ServerTimestamp | None = ...,
        starting_index: builtins.int = ...,
        data_bytes: builtins.bytes = ...,
        compression: global___TensorChunk.CompressionType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["timestamp", b"timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["compression", b"compression", "data_bytes", b"data_bytes", "starting_index", b"starting_index", "timestamp", b"timestamp"]) -> None: ...

global___TensorChunk = TensorChunk

@typing.final
class TensorUpdate(google.protobuf.message.Message):
    """Definitions from tensor_ops.proto appended below"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHUNKS_FIELD_NUMBER: builtins.int
    @property
    def chunks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TensorChunk]:
        """A list of one or more chunks representing updates to the tensor."""

    def __init__(
        self,
        *,
        chunks: collections.abc.Iterable[global___TensorChunk] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["chunks", b"chunks"]) -> None: ...

global___TensorUpdate = TensorUpdate

@typing.final
class TensorInitializer(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHAPE_FIELD_NUMBER: builtins.int
    DTYPE_FIELD_NUMBER: builtins.int
    FILL_VALUE_FIELD_NUMBER: builtins.int
    INITIAL_STATE_FIELD_NUMBER: builtins.int
    dtype: builtins.str
    """The data type of the tensor as a string (e.g., "float32", "int64")."""
    fill_value: builtins.float
    """The default value to fill the tensor with upon creation."""
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """The full shape of the tensor being initialized (e.g., [10, 20])."""

    @property
    def initial_state(self) -> global___TensorUpdate:
        """An optional initial set of data chunks to apply after creation."""

    def __init__(
        self,
        *,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        dtype: builtins.str = ...,
        fill_value: builtins.float = ...,
        initial_state: global___TensorUpdate | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["initial_state", b"initial_state"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dtype", b"dtype", "fill_value", b"fill_value", "initial_state", b"initial_state", "shape", b"shape"]) -> None: ...

global___TensorInitializer = TensorInitializer
