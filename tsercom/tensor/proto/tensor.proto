syntax = "proto3";
package tsercom.tensor.proto;

import "time.proto"; // Assuming this provides dtp.ServerTimestamp

message TensorChunk {
  // Timestamp of the data chunk.
  dtp.ServerTimestamp timestamp = 1;
  // The starting index of this chunk in the larger conceptual 1D tensor.
  int64 starting_index = 2;
  // The raw bytes of the 1D tensor data chunk.
  bytes data_bytes = 3;
}

// Definitions from tensor_ops.proto appended below

message TensorUpdate {
  // A list of one or more chunks representing updates to the tensor.
  repeated TensorChunk chunks = 1;
}

message TensorInitializer {
  // The full shape of the tensor being initialized (e.g., [10, 20]).
  repeated int64 shape = 1;
  // The data type of the tensor as a string (e.g., "float32", "int64").
  string dtype = 2;
  // The default value to fill the tensor with upon creation.
  double fill_value = 3;
  // An optional initial set of data chunks to apply after creation.
  TensorUpdate initial_state = 4;
}
