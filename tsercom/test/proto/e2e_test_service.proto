syntax = "proto3";

package tsercom.test.proto;

import "caller_id.proto"; // Adjusted path
import "tensor.proto";    // Adjusted path

// Option to generate a separate file for each message, if desired.
// option java_multiple_files = true;
// option java_package = "com.example.tsercom.test.e2e";
// option java_outer_classname = "E2ETestServiceProto";

message EchoRequest {
  string message = 1;
}

message EchoResponse {
  string response = 1;
}

// New E2E Test Service messages for streaming
message E2EStreamRequest {
  oneof payload {
    tsercom.CallerId caller_id = 1; // For the initial handshake
    tsercom.TensorChunk data_chunk = 2; // For subsequent data
  }
}

message E2EStreamResponse {
  string ack_message = 1;
  optional tsercom.TensorChunk data_chunk = 2; // To allow server to send data back
}

service E2ETestService {
  // A simple unary RPC for echo functionality.
  rpc Echo(EchoRequest) returns (EchoResponse);

  // A bidirectional-streaming RPC for the full E2E test.
  rpc ExchangeData(stream E2EStreamRequest) returns (stream E2EStreamResponse);
}
