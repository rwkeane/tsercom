"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EchoRequest(google.protobuf.message.Message):
    """Option to generate a separate file for each message, if desired.
    option java_multiple_files = true;
    option java_package = "com.example.tsercom.test.e2e";
    option java_outer_classname = "E2ETestServiceProto";
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MESSAGE_FIELD_NUMBER: builtins.int
    message: builtins.str
    def __init__(
        self,
        *,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["message", b"message"]) -> None: ...

global___EchoRequest = EchoRequest

@typing.final
class EchoResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    response: builtins.str
    def __init__(
        self,
        *,
        response: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["response", b"response"]) -> None: ...

global___EchoResponse = EchoResponse

@typing.final
class StreamDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_ID_FIELD_NUMBER: builtins.int
    data_id: builtins.int
    def __init__(
        self,
        *,
        data_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data_id", b"data_id"]) -> None: ...

global___StreamDataRequest = StreamDataRequest

@typing.final
class StreamDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_CHUNK_FIELD_NUMBER: builtins.int
    SEQUENCE_NUMBER_FIELD_NUMBER: builtins.int
    data_chunk: builtins.str
    sequence_number: builtins.int
    def __init__(
        self,
        *,
        data_chunk: builtins.str = ...,
        sequence_number: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["data_chunk", b"data_chunk", "sequence_number", b"sequence_number"]) -> None: ...

global___StreamDataResponse = StreamDataResponse
