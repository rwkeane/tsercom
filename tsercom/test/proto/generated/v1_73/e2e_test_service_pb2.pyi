"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import tsercom.caller_id.proto as caller_id_pb2
import google.protobuf.descriptor
import google.protobuf.message
import tensor_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class EchoRequest(google.protobuf.message.Message):
    """Option to generate a separate file for each message, if desired.
    option java_multiple_files = true;
    option java_package = "com.example.tsercom.test.e2e";
    option java_outer_classname = "E2ETestServiceProto";
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MESSAGE_FIELD_NUMBER: builtins.int
    message: builtins.str
    def __init__(
        self,
        *,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["message", b"message"]) -> None: ...

global___EchoRequest = EchoRequest

@typing.final
class EchoResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    response: builtins.str
    def __init__(
        self,
        *,
        response: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["response", b"response"]
    ) -> None: ...

global___EchoResponse = EchoResponse

@typing.final
class E2EStreamRequest(google.protobuf.message.Message):
    """New E2E Test Service messages for streaming"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALLER_ID_FIELD_NUMBER: builtins.int
    DATA_CHUNK_FIELD_NUMBER: builtins.int
    @property
    def caller_id(self) -> caller_id_pb2.CallerId:
        """For the initial handshake"""

    @property
    def data_chunk(self) -> tensor_pb2.TensorChunk:
        """For subsequent data"""

    def __init__(
        self,
        *,
        caller_id: caller_id_pb2.CallerId | None = ...,
        data_chunk: tensor_pb2.TensorChunk | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "caller_id",
            b"caller_id",
            "data_chunk",
            b"data_chunk",
            "payload",
            b"payload",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "caller_id",
            b"caller_id",
            "data_chunk",
            b"data_chunk",
            "payload",
            b"payload",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["payload", b"payload"]
    ) -> typing.Literal["caller_id", "data_chunk"] | None: ...

global___E2EStreamRequest = E2EStreamRequest

@typing.final
class E2EStreamResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACK_MESSAGE_FIELD_NUMBER: builtins.int
    DATA_CHUNK_FIELD_NUMBER: builtins.int
    ack_message: builtins.str
    @property
    def data_chunk(self) -> tensor_pb2.TensorChunk:
        """To allow server to send data back"""

    def __init__(
        self,
        *,
        ack_message: builtins.str = ...,
        data_chunk: tensor_pb2.TensorChunk | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "_data_chunk", b"_data_chunk", "data_chunk", b"data_chunk"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "_data_chunk",
            b"_data_chunk",
            "ack_message",
            b"ack_message",
            "data_chunk",
            b"data_chunk",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["_data_chunk", b"_data_chunk"]
    ) -> typing.Literal["data_chunk"] | None: ...

global___E2EStreamResponse = E2EStreamResponse
