============================= test session starts ==============================
platform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0
rootdir: /app
configfile: pyproject.toml
plugins: asyncio-1.0.0, timeout-2.4.0, mock-3.14.1, anyio-4.9.0, cov-6.1.1, json-report-1.5.0, metadata-3.1.1
asyncio: mode=strict, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
timeout: 120.0s
timeout method: signal
timeout func_only: False
collected 519 items

tsercom/api/local_process/local_runtime_factory_factory_unittest.py .... [  0%]
...                                                                      [  1%]
tsercom/api/local_process/local_runtime_factory_unittest.py ....         [  2%]
tsercom/api/local_process/runtime_command_bridge_unittest.py ........... [  4%]
......                                                                   [  5%]
tsercom/api/local_process/runtime_wrapper_unittest.py .........          [  7%]
tsercom/api/runtime_manager_unittest.py .................                [ 10%]
tsercom/api/split_process/data_reader_sink_unittest.py ......            [ 11%]
tsercom/api/split_process/data_reader_source_unittest.py ..........      [ 13%]
tsercom/api/split_process/event_source_unittest.py .......               [ 14%]
tsercom/api/split_process/remote_runtime_factory_unittest.py ....        [ 15%]
tsercom/api/split_process/runtime_command_source_unittest.py .........   [ 17%]
tsercom/api/split_process/shim_runtime_handle_unittest.py ........       [ 18%]
tsercom/api/split_process/split_process_error_watcher_sink_unittest.py . [ 19%]
..                                                                       [ 19%]
tsercom/api/split_process/split_process_error_watcher_source_unittest.py . [ 19%]
......                                                                   [ 20%]
tsercom/api/split_process/split_runtime_factory_factory_unittest.py ..   [ 21%]
tsercom/caller_id/caller_id_map_unittest.py .....                        [ 22%]
tsercom/caller_id/caller_identifier_unittest.py ..............           [ 24%]
tsercom/caller_id/caller_identifier_waiter_unittest.py ....              [ 25%]
tsercom/caller_id/client_id_fetcher_unittest.py .......                  [ 26%]
tsercom/data/data_host_base_unittest.py .....                            [ 27%]
tsercom/data/data_timeout_tracker_unittest.py ..........                 [ 29%]
tsercom/data/exposed_data_with_responder_unittest.py .....               [ 30%]
tsercom/data/remote_data_aggregator_impl_unittest.py ................... [ 34%]
.                                                                        [ 34%]
tsercom/data/remote_data_organizer_unittest.py ......................... [ 39%]
.                                                                        [ 39%]
tsercom/discovery/discovery_host_unittest.py .......                     [ 41%]
tsercom/discovery/mdns/instance_listener_unittest.py ...........         [ 43%]
tsercom/discovery/mdns/instance_publisher_unittest.py .................. [ 46%]
.                                                                        [ 46%]
tsercom/discovery/service_connector_unittest.py ........                 [ 48%]
tsercom/discovery_e2etest.py ......                                      [ 49%]
tsercom/rpc/connection/client_disconnection_retrier_unittest.py .......  [ 50%]
tsercom/rpc/serialization/caller_id_extraction_unittest.py ............  [ 53%]
tsercom/rpc_e2etest.py .............                                     [ 55%]
tsercom/runtime/client/client_runtime_data_handler_unittest.py ......    [ 56%]
tsercom/runtime/client/timesync_tracker_unittest.py ......               [ 57%]
tsercom/runtime/id_tracker_unittest.py ...............                   [ 60%]
tsercom/runtime/runtime_config_unittest.py ...............               [ 63%]
tsercom/runtime/runtime_data_handler_base_unittest.py .................F [ 67%]
FF.                                                                      [ 67%]
tsercom/runtime/runtime_main_unittest.py ...FF                           [ 68%]
tsercom/runtime/server/server_runtime_data_handler_unittest.py .....     [ 69%]
tsercom/runtime_e2etest.py ......                                        [ 70%]
tsercom/threading/aio/aio_utils_unittest.py .......                      [ 72%]
tsercom/threading/aio/event_loop_factory_unittest.py .                   [ 72%]
tsercom/threading/aio/global_event_loop_unittest.py .........            [ 74%]
tsercom/threading/async_poller_unittest.py ...............               [ 77%]
tsercom/threading/atomic_unittest.py ......                              [ 78%]
tsercom/threading/multiprocess/multiprocess_queue_sink_unittest.py ....  [ 78%]
tsercom/threading/thread_safe_queue_unittest.py .......                  [ 80%]
tsercom/threading/thread_watcher_unittest.py ............                [ 82%]
tsercom/threading/throwing_thread_pool_executor_unittest.py ........     [ 84%]
tsercom/threading/throwing_thread_unittest.py .....s                     [ 85%]
tsercom/timesync/client/client_synchronized_clock_unittest.py .......... [ 87%]
                                                                         [ 87%]
tsercom/timesync/client/fake_time_sync_client_unittest.py ........       [ 88%]
tsercom/timesync/client/time_sync_client_unittest.py ..............      [ 91%]
tsercom/timesync/common/fake_synchronized_clock_unittest.py ...          [ 92%]
tsercom/timesync/common/synchronized_clock_unittest.py .....             [ 93%]
tsercom/timesync/common/synchronized_timestamp_unittest.py ............. [ 95%]
..                                                                       [ 95%]
tsercom/timesync/server/server_synchronized_clock_unittest.py ...        [ 96%]
tsercom/util/ip_unittest.py ........                                     [ 98%]
tsercom/util/is_running_tracker_unittest.py ........                     [ 99%]
tsercom/util/stopable_unittest.py ..                                     [100%]

=================================== FAILURES ===================================
_ TestRuntimeDataHandlerBaseRegisterCaller.test_register_caller_mutex_args_none _

self = <tsercom.runtime.runtime_data_handler_base_unittest.TestRuntimeDataHandlerBaseRegisterCaller object at 0x7f65118e7fd0>
handler_fixture = <tsercom.runtime.runtime_data_handler_base_unittest.ConcreteRuntimeDataHandler object at 0x7f651004be80>

    @pytest.mark.asyncio
    async def test_register_caller_mutex_args_none(self, handler_fixture):
        """Test providing neither endpoint/port nor context raises ValueError."""
        caller_id = CallerIdentifier.random()
        with pytest.raises(ValueError) as excinfo:
            await handler_fixture.register_caller(
                caller_id
            )  # No endpoint, port or context
>       assert (
            "Provide (endpoint/port) or context, not both/neither."  # Updated message
            in str(excinfo.value)
        )
E       AssertionError: assert 'Provide (endpoint/port) or context, not both/neither.' in 'Provide (endpoint and port) or context, but not both or neither.'
E        +  where 'Provide (endpoint and port) or context, but not both or neither.' = str(ValueError('Provide (endpoint and port) or context, but not both or neither.'))
E        +    where ValueError('Provide (endpoint and port) or context, but not both or neither.') = <ExceptionInfo ValueError('Provide (endpoint and port) or context, but not both or neither.') tblen=2>.value

tsercom/runtime/runtime_data_handler_base_unittest.py:733: AssertionError
_ TestRuntimeDataHandlerBaseRegisterCaller.test_register_caller_endpoint_without_port _

self = <tsercom.runtime.runtime_data_handler_base_unittest.TestRuntimeDataHandlerBaseRegisterCaller object at 0x7f65118e5420>
handler_fixture = <tsercom.runtime.runtime_data_handler_base_unittest.ConcreteRuntimeDataHandler object at 0x7f651005bd30>

    @pytest.mark.asyncio
    async def test_register_caller_endpoint_without_port(
        self, handler_fixture
    ):
        """Test providing endpoint without port raises ValueError."""
        caller_id = CallerIdentifier.random()
        with pytest.raises(ValueError) as excinfo:
            await handler_fixture.register_caller(
                caller_id, endpoint="1.2.3.4"
            )  # Port is None
>       assert (
            "If 'endpoint' provided, 'port' must be too, and vice-versa."  # Updated message
            in str(excinfo.value)
        )
E       assert "If 'endpoint' provided, 'port' must be too, and vice-versa." in "If 'endpoint' is provided, 'port' must also be, and vice-versa."
E        +  where "If 'endpoint' is provided, 'port' must also be, and vice-versa." = str(ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa."))
E        +    where ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa.") = <ExceptionInfo ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa.") tblen=2>.value

tsercom/runtime/runtime_data_handler_base_unittest.py:748: AssertionError
_ TestRuntimeDataHandlerBaseRegisterCaller.test_register_caller_port_without_endpoint _

self = <tsercom.runtime.runtime_data_handler_base_unittest.TestRuntimeDataHandlerBaseRegisterCaller object at 0x7f65118e5d50>
handler_fixture = <tsercom.runtime.runtime_data_handler_base_unittest.ConcreteRuntimeDataHandler object at 0x7f65101f3f40>

    @pytest.mark.asyncio
    async def test_register_caller_port_without_endpoint(
        self, handler_fixture
    ):
        """Test providing port without endpoint raises ValueError."""
        caller_id = CallerIdentifier.random()
        with pytest.raises(ValueError) as excinfo:
            await handler_fixture.register_caller(
                caller_id, port=1234
            )  # Endpoint is None
>       assert (
            "If 'endpoint' provided, 'port' must be too, and vice-versa."  # Updated message
            in str(excinfo.value)
        )
E       assert "If 'endpoint' provided, 'port' must be too, and vice-versa." in "If 'endpoint' is provided, 'port' must also be, and vice-versa."
E        +  where "If 'endpoint' is provided, 'port' must also be, and vice-versa." = str(ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa."))
E        +    where ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa.") = <ExceptionInfo ValueError("If 'endpoint' is provided, 'port' must also be, and vice-versa.") tblen=2>.value

tsercom/runtime/runtime_data_handler_base_unittest.py:763: AssertionError
_________________ TestRemoteProcessMain.test_normal_execution __________________

self = <tsercom.runtime.runtime_main_unittest.TestRemoteProcessMain object at 0x7f65118e7d90>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65118180a0>

    def test_normal_execution(
        self,
        mocker,
    ):
        """Tests the normal execution path of remote_process_main."""
        mock_clear_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.clear_tsercom_event_loop"
        )
        MockThreadWatcher = mocker.patch(
            "tsercom.runtime.runtime_main.ThreadWatcher",
            return_value=mocker.Mock(spec=ThreadWatcher),
        )
        mock_create_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.create_tsercom_event_loop_from_watcher"
        )
        MockSplitProcessErrorWatcherSink = mocker.patch(
            "tsercom.runtime.runtime_main.SplitProcessErrorWatcherSink"
        )
        mock_initialize_runtimes = mocker.patch(
            "tsercom.runtime.runtime_main.initialize_runtimes"
        )
        mock_run_on_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.run_on_event_loop"
        )

        mock_factories = [mocker.Mock(spec=RuntimeFactory)]
        mock_error_queue = mocker.Mock(spec=MultiprocessQueueSink)

        mock_runtime1 = mocker.Mock(spec=Runtime)
        mock_runtime1.stop = mocker.Mock(name="runtime1_stop")
        mock_runtime2 = mocker.Mock(spec=Runtime)
        mock_runtime2.stop = mocker.Mock(name="runtime2_stop")
        mock_initialize_runtimes.return_value = [mock_runtime1, mock_runtime2]

        mock_sink_instance = MockSplitProcessErrorWatcherSink.return_value

        remote_process_main(mock_factories, mock_error_queue)

        mock_clear_event_loop.assert_called_once()
        MockThreadWatcher.assert_called_once()
        mock_create_event_loop.assert_called_once_with(
            MockThreadWatcher.return_value
        )
        MockSplitProcessErrorWatcherSink.assert_called_once_with(
            MockThreadWatcher.return_value, mock_error_queue
        )
        mock_initialize_runtimes.assert_called_once_with(
            MockThreadWatcher.return_value, mock_factories, is_testing=False
        )
        mock_sink_instance.run_until_exception.assert_called_once()

>       assert mock_run_on_event_loop.call_count == 2
E       AssertionError: assert 0 == 2
E        +  where 0 = <MagicMock name='run_on_event_loop' id='140072036879040'>.call_count

tsercom/runtime/runtime_main_unittest.py:476: AssertionError
_________ TestRemoteProcessMain.test_exception_in_run_until_exception __________

self = <tsercom.runtime.runtime_main_unittest.TestRemoteProcessMain object at 0x7f65118e7e80>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65118e93c0>

    def test_exception_in_run_until_exception(
        self,
        mocker,
    ):
        """Tests error handling when run_until_exception raises an error."""
        mock_clear_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.clear_tsercom_event_loop"
        )
        MockThreadWatcher = mocker.patch(
            "tsercom.runtime.runtime_main.ThreadWatcher",
            return_value=mocker.Mock(spec=ThreadWatcher),
        )
        mock_create_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.create_tsercom_event_loop_from_watcher"
        )
        MockSplitProcessErrorWatcherSink = mocker.patch(
            "tsercom.runtime.runtime_main.SplitProcessErrorWatcherSink"
        )
        mock_initialize_runtimes = mocker.patch(
            "tsercom.runtime.runtime_main.initialize_runtimes"
        )
        mock_run_on_event_loop = mocker.patch(
            "tsercom.runtime.runtime_main.run_on_event_loop"
        )

        mock_factories = [mocker.Mock(spec=RuntimeFactory)]
        mock_error_queue = mocker.Mock(spec=MultiprocessQueueSink)

        mock_runtime1 = mocker.Mock(spec=Runtime)
        mock_runtime1.stop = mocker.Mock(name="runtime1_stop")
        mock_runtime2 = mocker.Mock(spec=Runtime)
        mock_runtime2.stop = mocker.Mock(name="runtime2_stop")
        mock_initialize_runtimes.return_value = [mock_runtime1, mock_runtime2]

        mock_sink_instance = MockSplitProcessErrorWatcherSink.return_value
        test_exception = RuntimeError("Test error from sink")
        mock_sink_instance.run_until_exception.side_effect = test_exception

        with pytest.raises(RuntimeError, match="Test error from sink"):
            remote_process_main(mock_factories, mock_error_queue)

        mock_error_queue.put_nowait.assert_called_once_with(test_exception)
>       assert mock_run_on_event_loop.call_count == 2
E       AssertionError: assert 0 == 2
E        +  where 0 = <MagicMock name='run_on_event_loop' id='140072038399136'>.call_count

tsercom/runtime/runtime_main_unittest.py:528: AssertionError
=============================== warnings summary ===============================
tsercom/api/runtime_manager_unittest.py::TestRuntimeManager::test_start_in_process_async_no_loop_raises_error
  /usr/lib/python3.10/unittest/mock.py:2135: RuntimeWarning: coroutine 'dummy_coroutine_for_test' was never awaited
    setattr(_type, entry, MagicProxy(entry, self))
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tsercom/caller_id/client_id_fetcher_unittest.py::TestClientIdFetcher::test_caching_behavior
  /usr/lib/python3.10/unittest/mock.py:2181: RuntimeWarning: coroutine 'dummy_coroutine_for_test' was never awaited
    self.name = name
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tsercom/threading/aio/global_event_loop_unittest.py::TestGlobalEventLoop::test_set_tsercom_event_loop_to_current_thread_no_running_loop
  /usr/lib/python3.10/asyncio/base_events.py:674: RuntimeWarning: coroutine 'RuntimeDataHandlerBase.__dispatch_poller_data_loop' was never awaited
    self._ready.clear()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tsercom/runtime/runtime_data_handler_base_unittest.py::TestRuntimeDataHandlerBaseRegisterCaller::test_register_caller_mutex_args_none
FAILED tsercom/runtime/runtime_data_handler_base_unittest.py::TestRuntimeDataHandlerBaseRegisterCaller::test_register_caller_endpoint_without_port
FAILED tsercom/runtime/runtime_data_handler_base_unittest.py::TestRuntimeDataHandlerBaseRegisterCaller::test_register_caller_port_without_endpoint
FAILED tsercom/runtime/runtime_main_unittest.py::TestRemoteProcessMain::test_normal_execution
FAILED tsercom/runtime/runtime_main_unittest.py::TestRemoteProcessMain::test_exception_in_run_until_exception
======= 5 failed, 513 passed, 1 skipped, 3 warnings in 77.52s (0:01:17) ========
