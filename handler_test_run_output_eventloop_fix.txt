============================= test session starts ==============================
platform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0
rootdir: /app
configfile: pyproject.toml
plugins: asyncio-1.0.0, timeout-2.4.0, mock-3.14.1, anyio-4.9.0, cov-6.1.1, json-report-1.5.0, metadata-3.1.1
asyncio: mode=strict, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
timeout: 60.0s
timeout method: signal
timeout func_only: False
collected 11 items

tsercom/runtime/client/client_runtime_data_handler_unittest.py FFFFF.    [ 54%]
tsercom/runtime/server/server_runtime_data_handler_unittest.py FFFF.     [100%]

=================================== FAILURES ===================================
____________________ TestClientRuntimeDataHandler.test_init ____________________

self = <MagicMock name='__init__' id='140498726339152'>, args = (), kwargs = {}
expected = call()
actual = call(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fc86a10bc70>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: __init__()
E           Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))

/usr/lib/python3.10/unittest/mock.py:929: AssertionError

During handling of the above exception, another exception occurred:

self = <MagicMock name='__init__' id='140498726339152'>, args = (), kwargs = {}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
E       AssertionError: expected call not found.
E       Expected: __init__()
E       Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
E
E       pytest introspection follows:
E
E       Args:
E       assert (functools.pa...econds=None),) == ()
E
E         Left contains one more item: functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None)
E         Use -v to get more diff

/usr/lib/python3.10/unittest/mock.py:941: AssertionError

During handling of the above exception, another exception occurred:

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7fc868ab79a0>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140498725861744'>, 'handle...e='__init__' id='140498726339152'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498725855072'>, ...}
mock_thread_watcher = <MagicMock spec='ThreadWatcher' id='140498725862272'>
mock_data_reader = <MagicMock spec='RemoteDataReader' id='140498726256448'>
mock_event_source_poller = <MagicMock spec='AsyncPoller' id='140498725847632'>

    def test_init(
        self,
        handler_and_class_mocks,
        mock_thread_watcher,
        mock_data_reader,
        mock_event_source_poller,
    ):
        """Tests the __init__ method for correct instantiation and dependency setup."""
        handler = handler_and_class_mocks["handler"]
        TimeSyncTracker_class_mock = handler_and_class_mocks[
            "TimeSyncTracker_class_mock"
        ]
        id_tracker_init_mock = handler_and_class_mocks["id_tracker_init_mock"]
        time_sync_tracker_instance_mock = handler_and_class_mocks[
            "time_sync_tracker_instance_mock"
        ]
        id_tracker_instance_mock = handler_and_class_mocks[
            "id_tracker_instance_mock"
        ]

        TimeSyncTracker_class_mock.assert_called_once_with(
            mock_thread_watcher, is_testing=False
        )
        # Check that IdTracker.__init__ was called (it's called by RuntimeDataHandlerBase)
>       id_tracker_init_mock.assert_called_once_with()
E       AssertionError: expected call not found.
E       Expected: __init__()
E       Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
E
E       pytest introspection follows:
E
E       Args:
E       assert (functools.pa...econds=None),) == ()
E
E         Left contains one more item: functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None)
E         Use -v to get more diff

tsercom/runtime/client/client_runtime_data_handler_unittest.py:160: AssertionError
______________ TestClientRuntimeDataHandler.test_register_caller _______________

self = <MagicMock name='mock.add' id='140498726039712'>
args = (CallerIdentifier('d691cb4e-89f5-4909-8bd4-e616fd1b7369'), '192.168.1.100', 12345)
kwargs = {}, msg = "Expected 'add' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'add' to be called once. Called 0 times.

/usr/lib/python3.10/unittest/mock.py:940: AssertionError

During handling of the above exception, another exception occurred:

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7fc868ab7e20>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140498726551952'>, 'handle...e='__init__' id='140498726553200'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498726554544'>, ...}
mock_endpoint_data_processor = <MagicMock spec='EndpointDataProcessor' id='140498726808032'>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc868b03dc0>

    def test_register_caller(
        self, handler_and_class_mocks, mock_endpoint_data_processor, mocker
    ):
        """Tests the _register_caller method for correct registration flow."""
        handler = handler_and_class_mocks["handler"]
        mock_caller_id = CallerIdentifier.random()
        mock_endpoint = "192.168.1.100"
        mock_port = 12345

        mock_synchronized_clock = mocker.MagicMock(spec=SynchronizedClock)
        handler._mock_time_sync_tracker_instance.on_connect.return_value = (
            mock_synchronized_clock
        )

        mock_create_dp_method = mocker.patch.object(
            handler,
            "_create_data_processor",
            return_value=mock_endpoint_data_processor,
        )

        returned_processor = handler._register_caller(
            mock_caller_id, mock_endpoint, mock_port
        )

>       handler._mock_id_tracker_instance.add.assert_called_once_with(
            mock_caller_id, mock_endpoint, mock_port
        )
E       AssertionError: Expected 'add' to be called once. Called 0 times.

tsercom/runtime/client/client_runtime_data_handler_unittest.py:207: AssertionError
_________ TestClientRuntimeDataHandler.test_unregister_caller_valid_id _________

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7fc868ab7dc0>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140498725850176'>, 'handle...e='__init__' id='140498726342080'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498726345008'>, ...}

    def test_unregister_caller_valid_id(self, handler_and_class_mocks):
        """Test _unregister_caller with a valid and existing caller_id."""
        handler = handler_and_class_mocks["handler"]
        mock_caller_id = CallerIdentifier.random()
        mock_address = "192.168.1.100"
        mock_port = 12345

        handler._mock_id_tracker_instance.try_get.return_value = (
            mock_address,
            mock_port,
        )
        handler._mock_id_tracker_instance.remove.return_value = True

        result = handler._unregister_caller(mock_caller_id)

>       assert result is True
E       assert <coroutine object ClientRuntimeDataHandler._unregister_caller at 0x7fc86a100820> is True

tsercom/runtime/client/client_runtime_data_handler_unittest.py:233: AssertionError
___ TestClientRuntimeDataHandler.test_unregister_caller_invalid_id_not_found ___

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7fc868a55bd0>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140498725253472'>, 'handle...e='__init__' id='140498725251696'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498725249344'>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc8689c3eb0>

    def test_unregister_caller_invalid_id_not_found(
        self, handler_and_class_mocks, mocker
    ):
        """Test _unregister_caller with a non-existent caller_id."""
        handler = handler_and_class_mocks["handler"]
        mock_caller_id = CallerIdentifier.random()

        handler._mock_id_tracker_instance.try_get.return_value = None

        mock_logging_module = mocker.patch(
            "tsercom.runtime.client.client_runtime_data_handler.logging"
        )

        result = handler._unregister_caller(mock_caller_id)

>       assert result is False
E       assert <coroutine object ClientRuntimeDataHandler._unregister_caller at 0x7fc8689c8350> is False

tsercom/runtime/client/client_runtime_data_handler_unittest.py:259: AssertionError
_____________ TestClientRuntimeDataHandler.test_try_get_caller_id ______________

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7fc868a569e0>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140498725226480'>, 'handle...e='__init__' id='140498725225232'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498725238912'>, ...}

    def test_try_get_caller_id(self, handler_and_class_mocks):
        """Tests _try_get_caller_id for a successfully found ID."""
        handler = handler_and_class_mocks["handler"]
        mock_endpoint = "10.0.0.1"
        mock_port = 8080
        expected_caller_id = CallerIdentifier.random()

        handler._mock_id_tracker_instance.try_get.return_value = (
            expected_caller_id
        )

>       returned_caller_id = handler._try_get_caller_id(
            mock_endpoint, mock_port
        )

tsercom/runtime/client/client_runtime_data_handler_unittest.py:281:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tsercom.runtime.client.client_runtime_data_handler.ClientRuntimeDataHandler object at 0x7fc8689be110>
endpoint = '10.0.0.1', port = 8080

    def _try_get_caller_id(
        self, endpoint: str, port: int
    ) -> CallerIdentifier | None:
        """Tries to retrieve CallerIdentifier for a given endpoint and port.

        Args:
            endpoint: The network endpoint of the caller.
            port: The port number of the caller.

        Returns:
            The `CallerIdentifier` if found, otherwise `None`.
        """
        pair = self.__id_tracker.try_get(endpoint, port)
        if pair is None:
            return None

>       assert len(pair) == 3, len(pair)
E       TypeError: object of type 'CallerIdentifier' has no len()

tsercom/runtime/runtime_data_handler_base.py:310: TypeError
____________________ TestServerRuntimeDataHandler.test_init ____________________

self = <MagicMock name='__init__' id='140498749109104'>, args = (), kwargs = {}
expected = call()
actual = call(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fc868a15120>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: __init__()
E           Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))

/usr/lib/python3.10/unittest/mock.py:929: AssertionError

During handling of the above exception, another exception occurred:

self = <MagicMock name='__init__' id='140498749109104'>, args = (), kwargs = {}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
E       AssertionError: expected call not found.
E       Expected: __init__()
E       Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
E
E       pytest introspection follows:
E
E       Args:
E       assert (functools.pa...econds=None),) == ()
E
E         Left contains one more item: functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None)
E         Use -v to get more diff

/usr/lib/python3.10/unittest/mock.py:941: AssertionError

During handling of the above exception, another exception occurred:

self = <tsercom.runtime.server.server_runtime_data_handler_unittest.TestServerRuntimeDataHandler object at 0x7fc868a57fa0>
handler_with_mocks = {'TimeSyncServer_class_mock': <MagicMock name='TimeSyncServer' spec='TimeSyncServer' id='140498725861504'>, 'handler':...e='__init__' id='140498749109104'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498726341696'>, ...}
mock_data_reader = <MagicMock spec='RemoteDataReader' id='140498725432400'>
mock_event_source_poller = <MagicMock spec='AsyncPoller' id='140498726003392'>

    def test_init(
        self, handler_with_mocks, mock_data_reader, mock_event_source_poller
    ):
        """Tests constructor for correct initialization and dependency usage."""
        handler = handler_with_mocks["handler"]
        TimeSyncServer_class_mock = handler_with_mocks[
            "TimeSyncServer_class_mock"
        ]
        time_sync_server_instance_mock = handler_with_mocks[
            "time_sync_server_instance_mock"
        ]
        id_tracker_init_mock = handler_with_mocks["id_tracker_init_mock"]
        id_tracker_instance_mock = handler_with_mocks[
            "id_tracker_instance_mock"
        ]

        TimeSyncServer_class_mock.assert_called_once_with()
        time_sync_server_instance_mock.start_async.assert_called_once()
        time_sync_server_instance_mock.get_synchronized_clock.assert_called_once()
        assert (
            handler._ServerRuntimeDataHandler__clock
            == time_sync_server_instance_mock.get_synchronized_clock.return_value
        )

        # Check that IdTracker.__init__ was called (it's called by RuntimeDataHandlerBase)
>       id_tracker_init_mock.assert_called_once_with()
E       AssertionError: expected call not found.
E       Expected: __init__()
E       Actual: __init__(functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None))
E
E       pytest introspection follows:
E
E       Args:
E       assert (functools.pa...econds=None),) == ()
E
E         Left contains one more item: functools.partial(<class 'tsercom.threading.async_poller.AsyncPoller'>, min_poll_frequency_seconds=None)
E         Use -v to get more diff

tsercom/runtime/server/server_runtime_data_handler_unittest.py:158: AssertionError
______________ TestServerRuntimeDataHandler.test_register_caller _______________

self = <MagicMock name='mock.add' id='140498725678544'>
args = (CallerIdentifier('eaa04130-ba85-491f-bc20-a58d5cc2c037'), '192.168.1.100', 12345)
kwargs = {}, msg = "Expected 'add' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'add' to be called once. Called 0 times.

/usr/lib/python3.10/unittest/mock.py:940: AssertionError

During handling of the above exception, another exception occurred:

self = <tsercom.runtime.server.server_runtime_data_handler_unittest.TestServerRuntimeDataHandler object at 0x7fc868a57fd0>
handler_with_mocks = {'TimeSyncServer_class_mock': <MagicMock name='TimeSyncServer' spec='TimeSyncServer' id='140498725408000'>, 'handler':...e='__init__' id='140498725417216'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498725418608'>, ...}
mock_endpoint_data_processor = <MagicMock spec='EndpointDataProcessor' id='140498725661104'>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7fc8689ec7c0>

    def test_register_caller(
        self, handler_with_mocks, mock_endpoint_data_processor, mocker
    ):
        """Tests _register_caller method for correct registration flow."""
        handler = handler_with_mocks["handler"]
        id_tracker_instance_mock = handler_with_mocks[
            "id_tracker_instance_mock"
        ]

        mock_caller_id = CallerIdentifier.random()
        mock_endpoint = "192.168.1.100"
        mock_port = 12345

        expected_clock = handler._ServerRuntimeDataHandler__clock

        mock_create_dp_method = mocker.patch.object(
            handler,
            "_create_data_processor",
            return_value=mock_endpoint_data_processor,
        )

        returned_processor = handler._register_caller(
            mock_caller_id, mock_endpoint, mock_port
        )

>       id_tracker_instance_mock.add.assert_called_once_with(
            mock_caller_id, mock_endpoint, mock_port
        )
E       AssertionError: Expected 'add' to be called once. Called 0 times.

tsercom/runtime/server/server_runtime_data_handler_unittest.py:202: AssertionError
_____________ TestServerRuntimeDataHandler.test_unregister_caller ______________

self = <tsercom.runtime.server.server_runtime_data_handler_unittest.TestServerRuntimeDataHandler object at 0x7fc868a56470>
handler_with_mocks = {'TimeSyncServer_class_mock': <MagicMock name='TimeSyncServer' spec='TimeSyncServer' id='140498725155360'>, 'handler':...e='__init__' id='140498725487424'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498725504624'>, ...}

    def test_unregister_caller(self, handler_with_mocks):
        """Tests _unregister_caller method's current behavior."""
        # TODO(developer): Update assertions to reflect that SUT's _unregister_caller now calls id_tracker.has_id() and returns bool.
        handler = handler_with_mocks["handler"]
        id_tracker_instance_mock = handler_with_mocks[
            "id_tracker_instance_mock"
        ]
        time_sync_server_instance_mock = handler_with_mocks[
            "time_sync_server_instance_mock"
        ]

        mock_caller_id = CallerIdentifier.random()
        # Do not set id_tracker_instance_mock.has_id.return_value if has_id is not expected to be called.

        try:
            result = handler._unregister_caller(mock_caller_id)
        except Exception as e:
            pytest.fail(
                f"_unregister_caller raised an exception unexpectedly: {e}"
            )

        # Assuming the method now simply returns False and does not interact with id_tracker.
>       assert (
            result is False
        ), "Expected _unregister_caller to return False (current understanding of its behavior)"
E       AssertionError: Expected _unregister_caller to return False (current understanding of its behavior)
E       assert <coroutine object ServerRuntimeDataHandler._unregister_caller at 0x7fc8689bbed0> is False

tsercom/runtime/server/server_runtime_data_handler_unittest.py:232: AssertionError
_____________ TestServerRuntimeDataHandler.test_try_get_caller_id ______________

self = <tsercom.runtime.server.server_runtime_data_handler_unittest.TestServerRuntimeDataHandler object at 0x7fc868a54f40>
handler_with_mocks = {'TimeSyncServer_class_mock': <MagicMock name='TimeSyncServer' spec='TimeSyncServer' id='140498721577744'>, 'handler':...e='__init__' id='140498721579280'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140498721579568'>, ...}

    def test_try_get_caller_id(self, handler_with_mocks):
        """Tests _try_get_caller_id for a successfully found ID."""
        handler = handler_with_mocks["handler"]
        id_tracker_instance_mock = handler_with_mocks[
            "id_tracker_instance_mock"
        ]

        mock_endpoint = "10.0.0.1"
        mock_port = 8080
        expected_caller_id = CallerIdentifier.random()

        id_tracker_instance_mock.try_get.return_value = expected_caller_id

>       returned_caller_id = handler._try_get_caller_id(
            mock_endpoint, mock_port
        )

tsercom/runtime/server/server_runtime_data_handler_unittest.py:258:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tsercom.runtime.server.server_runtime_data_handler.ServerRuntimeDataHandler object at 0x7fc86863da20>
endpoint = '10.0.0.1', port = 8080

    def _try_get_caller_id(
        self, endpoint: str, port: int
    ) -> CallerIdentifier | None:
        """Tries to retrieve CallerIdentifier for a given endpoint and port.

        Args:
            endpoint: The network endpoint of the caller.
            port: The port number of the caller.

        Returns:
            The `CallerIdentifier` if found, otherwise `None`.
        """
        pair = self.__id_tracker.try_get(endpoint, port)
        if pair is None:
            return None

>       assert len(pair) == 3, len(pair)
E       TypeError: object of type 'CallerIdentifier' has no len()

tsercom/runtime/runtime_data_handler_base.py:310: TypeError
=========================== short test summary info ============================
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_init
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_register_caller
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_unregister_caller_valid_id
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_unregister_caller_invalid_id_not_found
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_try_get_caller_id
FAILED tsercom/runtime/server/server_runtime_data_handler_unittest.py::TestServerRuntimeDataHandler::test_init
FAILED tsercom/runtime/server/server_runtime_data_handler_unittest.py::TestServerRuntimeDataHandler::test_register_caller
FAILED tsercom/runtime/server/server_runtime_data_handler_unittest.py::TestServerRuntimeDataHandler::test_unregister_caller
FAILED tsercom/runtime/server/server_runtime_data_handler_unittest.py::TestServerRuntimeDataHandler::test_try_get_caller_id
========================= 9 failed, 2 passed in 0.73s ==========================
