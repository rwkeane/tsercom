============================= test session starts ==============================
platform linux -- Python 3.10.17, pytest-8.3.5, pluggy-1.5.0
rootdir: /app
configfile: pyproject.toml
plugins: asyncio-1.0.0, timeout-2.4.0, mock-3.14.1, anyio-4.9.0, cov-6.1.1, json-report-1.5.0, metadata-3.1.1
asyncio: mode=strict, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
timeout: 60.0s
timeout method: signal
timeout func_only: False
collected 11 items

tsercom/runtime/client/client_runtime_data_handler_unittest.py ..F...    [ 54%]
tsercom/runtime/server/server_runtime_data_handler_unittest.py .....     [100%]

=================================== FAILURES ===================================
_________ TestClientRuntimeDataHandler.test_unregister_caller_valid_id _________

self = <tsercom.runtime.client.client_runtime_data_handler_unittest.TestClientRuntimeDataHandler object at 0x7f7e17874ac0>
handler_and_class_mocks = {'TimeSyncTracker_class_mock': <MagicMock name='TimeSyncTracker' spec='TimeSyncTracker' id='140179537935184'>, 'handle...e='__init__' id='140179537934944'>, 'id_tracker_instance_mock': <MagicMock spec='IdTracker' id='140179537818240'>, ...}

    @pytest.mark.asyncio
    async def test_unregister_caller_valid_id(self, handler_and_class_mocks):
        """Test _unregister_caller with a valid and existing caller_id."""
        handler = handler_and_class_mocks["handler"]
        mock_caller_id = CallerIdentifier.random()
        mock_address = "192.168.1.100"
        mock_port = 12345

        handler._mock_id_tracker_instance.try_get.return_value = (
            mock_address,
            mock_port,
        )
        handler._mock_id_tracker_instance.remove.return_value = True

>       result = await handler._unregister_caller(mock_caller_id)

tsercom/runtime/client/client_runtime_data_handler_unittest.py:234:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tsercom.runtime.client.client_runtime_data_handler.ClientRuntimeDataHandler object at 0x7f7e1770d9c0>
caller_id = CallerIdentifier('9f3cb99a-3280-4087-923b-b1b83cd88f92')

    async def _unregister_caller(self, caller_id: CallerIdentifier) -> bool:
        """Unregisters a caller.

        Args:
            caller_id: The ID of the caller to unregister.

        Returns:
            True if caller was found and unregistered, False otherwise.
        """
        address_port_tuple = self._id_tracker.try_get(caller_id)
        if address_port_tuple is None:
            logging.warning(
                "Attempted to unregister non-existent caller_id: %s", caller_id
            )
            return False

>       address, _, _ = address_port_tuple
E       ValueError: not enough values to unpack (expected 3, got 2)

tsercom/runtime/client/client_runtime_data_handler.py:99: ValueError
=========================== short test summary info ============================
FAILED tsercom/runtime/client/client_runtime_data_handler_unittest.py::TestClientRuntimeDataHandler::test_unregister_caller_valid_id
========================= 1 failed, 10 passed in 0.41s =========================
